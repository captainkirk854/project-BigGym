use BIGGYM;

-- ----------------------------------------------------------
-- Start test run ..
-- ----------------------------------------------------------
begin;

-- ----------------------------------------------------------
-- Initialise ..
-- ----------------------------------------------------------
set @NUM_TESTS=4;
set @SPROC_NAME='spCreateTrainingPlan';

-- ----------------------------------------------------------
-- Set number of tests in this plan ..
-- ----------------------------------------------------------
select tap.plan(@NUM_TESTS);
set @TEST_COMMENT_PREFIX=concat('TESTING [', @SPROC_NAME, '] ');

-- ----------------------------------------------------------
-- Prerequisite operation(s) ..
-- ----------------------------------------------------------
set @firstname='Sylvester';
set @lastname='McCoy';
set @dob='1943-08-20';
set @gender='M';
set @height=1.75;
call spCreatePerson (@firstname, @lastname, @dob, @gender, @height, @personId, @returnCode, @errorCode, @stateCode, @errorMsg);

set @profileName='The worst doctor and cannot lift weights';
call spCreateProfile (@profileName, @personId, @profileId, @returnCode, @errorCode, @stateCode, @errorMsg);

-- ----------------------------------------------------------
-- Run Tests ..
-- ----------------------------------------------------------
set @TEST_COMMENT='Create new training plan';
set @PlanName='Maximum Power required';
set @PlanObjective='Gain Muscle';
set @Private='N';
call spCreateTrainingPlan (@PlanName, @PlanObjective, @Private, @profileId, @ObjectId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@ObjectId is NOT NULL and @returnCode >= 0 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Create another new training plan attached to same profile with different valid enum objective';
set @PlanName='Even more maximum Power required';
set @PlanObjective='Lose Weight';
set @Private='Y';
call spCreateTrainingPlan (@PlanName, @PlanObjective, @Private, @profileId, @ObjectId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@ObjectId is NOT NULL and @returnCode >= 0 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Create another new training plan attached to same profile with NULL objective and privacy settings';
set @PlanName='power power power';
set @PlanObjective=NULL;
set @Private=NULL;
call spCreateTrainingPlan (@PlanName, @PlanObjective, @Private, @profileId, @ObjectId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@ObjectId is NOT NULL and @returnCode >= 0 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Create another new training plan attached to same profile with different invalid enum objective';
set @PlanName='maximum power exceeded';
set @PlanObjective='Don''t know';
set @Private='Y';
call spCreateTrainingPlan (@PlanName, @PlanObjective, @Private, @profileId, @ObjectId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@ObjectId is NOT NULL and @returnCode >= 0 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));


-- ----------------------------------------------------------
-- Finish tests and clean up.
-- ----------------------------------------------------------
call tap.finish();
rollback;
