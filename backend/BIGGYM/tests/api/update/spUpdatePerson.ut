use BIGGYM;

-- ----------------------------------------------------------
-- Start test run ..
-- ----------------------------------------------------------
begin;

-- ----------------------------------------------------------
-- Initialise ..
-- ----------------------------------------------------------
set @NUM_TESTS=7;
set @SPROC_NAME='spUpdatePerson';

-- ----------------------------------------------------------
-- Set number of tests in this plan ..
-- ----------------------------------------------------------
select tap.plan(@NUM_TESTS);
set @TEST_COMMENT_PREFIX=concat('TESTING [', @SPROC_NAME, '] ');

-- ----------------------------------------------------------
-- Prerequisite operation(s) ..
-- ----------------------------------------------------------
set @FirstName='Sylvester';
set @LastName='McCoy';
set @DOB='1943-08-20';
call spCreatePerson (@FirstName, @LastName, @DOB, @PersonId, @returnCode, @errorCode, @stateCode, @errorMsg);

-- ----------------------------------------------------------
-- Run Tests ..
-- ----------------------------------------------------------
set @TEST_COMMENT='Update existing person with identical info';
set @FirstName='Sylvester';
set @LastName='McCoy';
set @DOB='1943-08-20';
call spUpdatePerson (@FirstName, @LastName, @DOB, @PersonId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@PersonId is NOT NULL and @returnCode >= 0 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Update existing person with a new identity';
set @FirstName='Leonard';
set @LastName='McCoy';
set @DOB='1943-08-20';
call spUpdatePerson (@FirstName, @LastName, @DOB, @PersonId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@PersonId is NOT NULL and @returnCode >= 0 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Update existing person with new identity using bad date format';
set @FirstName='Leonard';
set @LastName='McCoy';
set @DOB='20-08-1943';
call spUpdatePerson (@FirstName, @LastName, @DOB, @PersonId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@PersonId is NOT NULL and @returnCode = -6 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Update non-existing person with an existing identity (attempt to create a duplicate)';
set @ObjectId=100000;
set @FirstName='Leonard';
set @LastName='McCoy';
set @DOB='1943-08-20';
call spUpdatePerson (@FirstName, @LastName, @DOB, @ObjectId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@ObjectId is NOT NULL and @returnCode = -3 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Update NULL person with an existing identity (attempt to create a duplicate)';
set @ObjectId=NULL;
set @FirstName='Leonard';
set @LastName='McCoy';
set @DOB='1943-08-20';
call spUpdatePerson (@FirstName, @LastName, @DOB, @ObjectId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@ObjectId is NULL and @returnCode = -7 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Update existing person with NULL identity (attempt to create a duplicate)';
set @FirstName=NULL;
set @LastName='McCoy';
set @DOB='1943-08-20';
call spUpdatePerson (@FirstName, @LastName, @DOB, @PersonId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@ObjectId is NULL and @returnCode = -1 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Update existing person with illegal character identity (attempt to create a duplicate)';
set @FirstName='Leonard';
set @LastName='***!!*!*';
set @DOB='1943-08-20';
call spUpdatePerson (@FirstName, @LastName, @DOB, @PersonId, @returnCode, @errorCode, @stateCode, @errorMsg);
set @CONDITION_PASS=(@PersonId is not NULL and @returnCode = -1 and @errorCode = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

-- ----------------------------------------------------------
-- Finish tests and clean up.
-- ----------------------------------------------------------
call tap.finish();
rollback;
