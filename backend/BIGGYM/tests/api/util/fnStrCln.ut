use BIGGYM;

-- ----------------------------------------------------------
-- Start test run ..
-- ----------------------------------------------------------
begin;

-- ----------------------------------------------------------
-- Initialise ..
-- ----------------------------------------------------------
set @NUM_TESTS=10;
set @UTIL_NAME='strcln';

-- ----------------------------------------------------------
-- Set number of tests in this plan ..
-- ----------------------------------------------------------
select tap.plan(@NUM_TESTS);
set @TEST_COMMENT_PREFIX=concat('TESTING [', @UTIL_NAME, '] ');

-- ----------------------------------------------------------
-- Prerequisite operation(s) ..
-- ----------------------------------------------------------

-- ----------------------------------------------------------
-- Run Tests ..
-- ----------------------------------------------------------
set @TEST_COMMENT='Is string cleaned?';
set @StringIn='This works !!!!&&&$$!';
set @fnMode='clean';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) <= length(@StringIn));
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Indicate bad character positions';
set @StringIn='This works !!!!&&&$$!';
set @fnMode='show';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) = length(@StringIn));
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Is complex string cleaned?';
set @StringIn='These chaps "$"$"()"$ might disappear';
set @fnMode='clean';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) <= length(@StringIn));
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Are bad character positions indicated for complex string';
set @StringIn='These chaps "$"$"()"$ might disappear';
set @fnMode='show';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) = length(@StringIn));
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Clean string is unaffected';
set @StringIn='This is allowable and simple as 1 2 3';
set @fnMode='clean';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) = length(@StringIn));
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Clean string does not indicate bad character positions';
set @StringIn='This is allowable and simple as 1 2 3';
set @fnMode='show';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) = length(@StringIn));
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='If NULL passed in, NULL passed out';
set @StringIn=NULL;
set @fnMode='clean';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(@RESULT is NULL);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='If NULL passed in, NULL passed out - no bad characters to show';
set @StringIn=NULL;
set @fnMode='show';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(@RESULT is NULL);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Magic with illegal quotes';
set @StringIn='''';
set @fnMode='clean';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) = 0);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

set @TEST_COMMENT='Magic with illegal quotes - 1 bad character';
set @StringIn='''';
set @fnMode='show';
select strcln(@StringIn, @fnMode) into @RESULT;
set @CONDITION_PASS=(length(@RESULT) = 1);
select tap.ok(@CONDITION_PASS, concat(@TEST_COMMENT_PREFIX, @TEST_COMMENT));

-- ----------------------------------------------------------
-- Finish tests and clean up.
-- ----------------------------------------------------------
call tap.finish();
rollback;
